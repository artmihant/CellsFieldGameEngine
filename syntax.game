-- комментарий

--- Примитивы ---

10 1 12 -31 -- числа. 

"привет, мир" -- строка
"привет, {name}" -- реактивная строка (зависит от значения name. В качестве name допускаются другие строки, числа и тензоры)

<1 2> -- вектор размера 1 (вектор-строка)
~<1 2> -- вектор размера 1 (вектор-столбец)

<<1 2>> -- матрица размера 1*2

~s - транспонирование вектора или матрицы

<<a b> <c d>> -- матрица a b
              --         c d

A <= 1 -- присвоение значения

b <=* A -- то же самое что и b <= b*A , то есть умножение на вектор

a + b -- векторы можно складывать и вычитать.

-- Для этого необходимо, что бы они были одинакового типа

-- оператор умножения для тензоров работает так:

Существуют тензоры рангов скаляр, вектор-строка(k), вектор-столбец(k), матрица.

* Произведение скаляра на что угодно дает это же с коэффициентами, домноженными на скаляр
* Произведение вектор-строки (n) и вектор-столбца (n) даст скаляр (скалярное произведение).
* Произведение вектор-строки (n) и вектор-столбца (m) при условии, что m\n , дает вектор-строку n/m с результатом частичного скалярного произведения.
 
* Произведение вектор-столбца и вектор-строки даст матрицу (тензорное произведение)
* Произведение двух вектор-строки или вектор-столбцов одного размера даст строку (столбец) с результатом попарного произведения. 
* Произведение вектор-строки и матрицы совместного типа или матрицы и вектор-столбца совместного типа даст результат матричного произведения
* Произведение матрицы и вектор-строки



1) если умножаем на число, всё умножится почленно
2) При умножении одномерного вектора на одномерный или двумерный необходимо, что бы 

2) если умножаем двумерный вектор на двумерный вектор и у векторов совместимые размеры, умножится по законам матричного умножения

3) если мы умножаем две вектор-строки, они умножатся покомпонентно


-- Множества --

1) множества упорядочены
2) в множество запрещено повторение
3) все элементы



<x y> -- вектор (вектор-строка в целочис. коорд) если x y числа


[] -- пустое множество

[<1 2> <3 4>] -- множество с наполнением (векторами)

[<0 0>...<8 8>] -- прямоугольник 9*9

|x| -- модуль x. Для чисел - иx модуль, для вектора - длина, для матрицы - детерминант, для множества - размер. Всегда числовое значение

<x> -- если x - множество, то вектор, характеризующий размер прямоугольника, покрывающего данное множество.


a <= <3 4> -- присвоение в а значения (в данном случае - вектора)

a <=> |b| -- реактивное присвоение значения (теперь а зависит от b, и всякий раз, когда нужно вычислить а, оно вычислится как модуль b

-- функция вычисления факториала
factorial <= n =>
    n < 0 ? 0 :
    n = 0 ? 1 :
    n * factorial (n-1)


[#green] - пустое множество клеток цвета green
["Привет" #red] - пустое множество клеток с надписью цвета red

y | x - обьединение множества x и y . Если это множества клеток не равного типа, вернет просто множество. Если одно - множество клеток типа а другое нет или оба множества клеток равного типа, вернет множество с типом.

x <= [#green]
x <=| <1 1> -- во множество #green добавлена клетка <1 1>

main - специальный обьект.

main <=| x -- операция добавления на поле. Имеет смысл добавлять только множества клеток.

|main| -- текущая площадь пересечения множеств всех добавленых клеток.
<main> -- размер прямоугольника вокруг них

main <=| x -- добавление множества x на поле
main <=\ x -- убирание x с поля

Операции множеств
a|b -- пересечение множеств
a&b -- обьединение множество
a\b -- вычитание множеств
a^b -- то же что и a|b \ a&b

тернарный оператор
a ? b : c если a - пустое множество, исполняет b иначе исполнит c


пустое множество []


